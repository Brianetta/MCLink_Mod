import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

ext.getChangeLog = { ->
    def outStream = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = [ 'log', '-n', '1', "--format='%B'"]
        standardOutput = outStream
    }
    return outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")
}

evaluationDependsOnChildren()

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = "0.1.2"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

allprojects {
    group = "net.dries007.mclink"
    archivesBaseName = "MCLink"
    apply plugin: 'maven'
    sourceCompatibility = targetCompatibility = "1.7"
    compileJava {
        sourceCompatibility = targetCompatibility = "1.7"
    }
}

repositories {
    mavenCentral()
}
    
dependencies {
    compile 'com.google.guava:guava:17.0'
    compile 'com.google.code.gson:gson:2.2.4'
}

task setupDecompWorkspace
task setupDevWorkspace
task setupCiWorkspace

project.tasks.withType(Jar) { jarTask ->
    jarTask.appendix = 'lib'
}

subprojects {

    version = rootProject.version

    dependencies {
        compile rootProject
    }

    sourceSets.main.resources.srcDirs += rootProject.sourceSets.main.resources.srcDirs

    jar {
        duplicatesStrategy = 'exclude'
        from rootProject.sourceSets.main.output
    }

    if (project.hasProperty('minecraft'))
    {
        sourceJar {
            duplicatesStrategy = 'exclude'
            from rootProject.sourceSets.main.allSource
        }

        project.tasks.withType(Jar) { jarTask ->
            jarTask.appendix = 'Forge-' + project.minecraft.version
        }

        processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }

            doLast {
                def updateFile = new File(project.archivesBaseName.toLowerCase() + '.json')
                def json
                if (updateFile.exists()) {
                    json = new JsonSlurper().parseText(updateFile.getText())
                }
                else {
                    def builder = new JsonBuilder()
                    json = builder(
                        homepage: "https://mclink.dries007.net",
                        promos: new HashMap<>()
                    )
                }
                json['promos'][project.minecraft.version + '-latest'] = project.version
                json['promos'][project.minecraft.version + '-recommended'] = project.version
                if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
                def version = json[project.minecraft.version]
                version.put(project.version, getChangeLog())
                updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
            }
        }

        rootProject.setupDecompWorkspace.dependsOn setupDecompWorkspace
        rootProject.setupDevWorkspace.dependsOn setupDevWorkspace
        rootProject.setupCiWorkspace.dependsOn setupCiWorkspace
    }
    else
    {
        project.tasks.withType(Jar) { jarTask ->
            jarTask.appendix = project.name
        }
    }

    rootProject.build.dependsOn build
}
